{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my python tools documentation This site provides a quick reference for modern tools in the Python ecosystem. Contents uv \u2014 A fast, all-in-one Python package and project manager. MkDocs \u2014 A static site generator for project documentation. Getting Started Browse the sections above to learn about each tool. Use the navigation menu (on the left) to move between pages. Check the official documentation for deeper dives: uv docs MkDocs docs Happy coding and documenting \ud83d\ude80","title":"Home"},{"location":"#welcome-to-my-python-tools-documentation","text":"This site provides a quick reference for modern tools in the Python ecosystem.","title":"Welcome to my python tools documentation"},{"location":"#contents","text":"uv \u2014 A fast, all-in-one Python package and project manager. MkDocs \u2014 A static site generator for project documentation.","title":"Contents"},{"location":"#getting-started","text":"Browse the sections above to learn about each tool. Use the navigation menu (on the left) to move between pages. Check the official documentation for deeper dives: uv docs MkDocs docs Happy coding and documenting \ud83d\ude80","title":"Getting Started"},{"location":"mkdocs/","text":"MkDocs \u2014 Static Site Generator for Project Documentation MkDocs is a fast, simple, and modern static site generator that\u2019s designed specifically for building project documentation. It uses Markdown for content and YAML for configuration. Key Features Markdown-based Write your docs in plain Markdown files. Easy to learn, portable, and lightweight. YAML configuration Manage site structure and settings through a single mkdocs.yml file. Themes and customization Comes with a built-in theme and supports community themes (e.g., Material for MkDocs ). Fast live preview Built-in dev server with hot reloading for quick feedback during editing. Easy deployment Generate a fully static site ( mkdocs build ) that can be hosted anywhere \u2014 GitHub Pages, Netlify, Read the Docs, etc. Why Use MkDocs Benefit Detail Simplicity Minimal setup, just Markdown + YAML. Focus on docs Unlike general static site tools, MkDocs is purpose-built for documentation. Active ecosystem Extensions, plugins, and themes make it highly adaptable. Easy deployment mkdocs gh-deploy can push your docs directly to GitHub Pages. Basic Usage Here are some common MkDocs commands: # Install MkDocs pip install mkdocs # Create a new project mkdocs new my-project cd my-project # Preview locally mkdocs serve # Build the site (output goes to the \"site/\" directory) mkdocs build # Deploy to GitHub Pages mkdocs gh-deploy","title":"MkDocs"},{"location":"mkdocs/#mkdocs-static-site-generator-for-project-documentation","text":"MkDocs is a fast, simple, and modern static site generator that\u2019s designed specifically for building project documentation. It uses Markdown for content and YAML for configuration.","title":"MkDocs \u2014 Static Site Generator for Project Documentation"},{"location":"mkdocs/#key-features","text":"Markdown-based Write your docs in plain Markdown files. Easy to learn, portable, and lightweight. YAML configuration Manage site structure and settings through a single mkdocs.yml file. Themes and customization Comes with a built-in theme and supports community themes (e.g., Material for MkDocs ). Fast live preview Built-in dev server with hot reloading for quick feedback during editing. Easy deployment Generate a fully static site ( mkdocs build ) that can be hosted anywhere \u2014 GitHub Pages, Netlify, Read the Docs, etc.","title":"Key Features"},{"location":"mkdocs/#why-use-mkdocs","text":"Benefit Detail Simplicity Minimal setup, just Markdown + YAML. Focus on docs Unlike general static site tools, MkDocs is purpose-built for documentation. Active ecosystem Extensions, plugins, and themes make it highly adaptable. Easy deployment mkdocs gh-deploy can push your docs directly to GitHub Pages.","title":"Why Use MkDocs"},{"location":"mkdocs/#basic-usage","text":"Here are some common MkDocs commands: # Install MkDocs pip install mkdocs # Create a new project mkdocs new my-project cd my-project # Preview locally mkdocs serve # Build the site (output goes to the \"site/\" directory) mkdocs build # Deploy to GitHub Pages mkdocs gh-deploy","title":"Basic Usage"},{"location":"uv/","text":"uv \u2014 Modern Python Package & Project Manager uv is a high-performance, \u201call-in-one\u201d tool for managing Python projects. It aims to replace or consolidate many of the tools in the typical Python ecosystem (like pip, virtualenv, pipx, poetry, pyenv, etc.) while being much faster and giving a smooth developer experience. :contentReference[oaicite:0]{index=0} Key Features Dependency and environment management Handles installing, upgrading, removing dependencies; locks and syncs environments. Automatically manages virtual environments for your projects. :contentReference[oaicite:1]{index=1} Tool execution & \u201cephemeral\u201d tools You can run CLI tools without permanently installing them, using commands like uvx (alias for uv tool run ). Useful for linting, formatting, etc. :contentReference[oaicite:2]{index=2} Python version management Provides commands to install and pin specific Python versions. :contentReference[oaicite:3]{index=3} Project initialization, building & publishing Scaffold Python projects, build distributions, publish to package indexes. :contentReference[oaicite:4]{index=4} Pip interface compatibility Supports many existing workflows: uv pip install \u2026 , dealing with requirements.txt , etc. So migration is often smooth. :contentReference[oaicite:5]{index=5} Why Use uv Benefit Detail Speed Much faster dependency resolution, installations, environment setup compared to pip, virtualenv, pip-tools. :contentReference[oaicite:6]{index=6} Reduced tool-sprawl One tool instead of juggling many (pip, pipx, poetry, virtualenv, pyenv, etc.). Fewer contexts to switch. :contentReference[oaicite:7]{index=7} Better reproducibility Lock files, isolated tool / project environments, version pinning. :contentReference[oaicite:8]{index=8} Modern UX Clean commands, alias like uvx , good docs, nicer developer experience. :contentReference[oaicite:9]{index=9} Basic Usage Here are some common commands you\u2019ll use with uv : # Install uv (one of the ways) curl -LsSf https://astral.sh/uv/install.sh | sh # or via pip: pip install uv :contentReference[oaicite:10]{index=10} # Add dependencies in a project uv add requests flask # Lock dependencies, sync them uv lock uv sync # Run a tool once without installing it permanently uvx ruff check src/ # Permanently install a tool uv tool install ruff # Manage Python versions uv python install 3.12 uv python pin 3.12 # Build and publish uv build uv publish","title":"uv"},{"location":"uv/#uv-modern-python-package-project-manager","text":"uv is a high-performance, \u201call-in-one\u201d tool for managing Python projects. It aims to replace or consolidate many of the tools in the typical Python ecosystem (like pip, virtualenv, pipx, poetry, pyenv, etc.) while being much faster and giving a smooth developer experience. :contentReference[oaicite:0]{index=0}","title":"uv \u2014 Modern Python Package &amp; Project Manager"},{"location":"uv/#key-features","text":"Dependency and environment management Handles installing, upgrading, removing dependencies; locks and syncs environments. Automatically manages virtual environments for your projects. :contentReference[oaicite:1]{index=1} Tool execution & \u201cephemeral\u201d tools You can run CLI tools without permanently installing them, using commands like uvx (alias for uv tool run ). Useful for linting, formatting, etc. :contentReference[oaicite:2]{index=2} Python version management Provides commands to install and pin specific Python versions. :contentReference[oaicite:3]{index=3} Project initialization, building & publishing Scaffold Python projects, build distributions, publish to package indexes. :contentReference[oaicite:4]{index=4} Pip interface compatibility Supports many existing workflows: uv pip install \u2026 , dealing with requirements.txt , etc. So migration is often smooth. :contentReference[oaicite:5]{index=5}","title":"Key Features"},{"location":"uv/#why-use-uv","text":"Benefit Detail Speed Much faster dependency resolution, installations, environment setup compared to pip, virtualenv, pip-tools. :contentReference[oaicite:6]{index=6} Reduced tool-sprawl One tool instead of juggling many (pip, pipx, poetry, virtualenv, pyenv, etc.). Fewer contexts to switch. :contentReference[oaicite:7]{index=7} Better reproducibility Lock files, isolated tool / project environments, version pinning. :contentReference[oaicite:8]{index=8} Modern UX Clean commands, alias like uvx , good docs, nicer developer experience. :contentReference[oaicite:9]{index=9}","title":"Why Use uv"},{"location":"uv/#basic-usage","text":"Here are some common commands you\u2019ll use with uv : # Install uv (one of the ways) curl -LsSf https://astral.sh/uv/install.sh | sh # or via pip: pip install uv :contentReference[oaicite:10]{index=10} # Add dependencies in a project uv add requests flask # Lock dependencies, sync them uv lock uv sync # Run a tool once without installing it permanently uvx ruff check src/ # Permanently install a tool uv tool install ruff # Manage Python versions uv python install 3.12 uv python pin 3.12 # Build and publish uv build uv publish","title":"Basic Usage"}]}